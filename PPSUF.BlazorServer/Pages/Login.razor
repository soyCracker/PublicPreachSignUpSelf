@using Microsoft.AspNetCore.Authentication.Cookies;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Authorization;
@using PPSUF.Service.Models.Req;
@using PPSUF.Service.Models.Res;
@using System.Text.Json;
@using System.Text;
@inject NavigationManager Navigator

@inject IHttpClientFactory ClientFactory

@page "/Login"


<MudStack AlignItems="AlignItems.Center">

    <MudStack AlignItems="AlignItems.Center" Row=true>
        <MudText Typo="Typo.h3" Color="Color.Primary">自己報</MudText>
        <MudText Typo="Typo.h4">系統</MudText>
    </MudStack>
    
    <br />

    <MudItem xs="12" sm="6" md="4">
        <MudPaper Class="pa-4" Elevation="4" Width="400px">

            <MudStack AlignItems="AlignItems.Center" Row=true>
                <MudAutocomplete T="string" Label="輸入你的全名" @bind-Value="username" SearchFunc="@Search" />
                <br />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoginProcess">登入</MudButton>
            </MudStack>

            
            
        </MudPaper>
    </MudItem>
</MudStack>



@code {
    private string username;
    private string[] AccountNameArray =
    {
        "賴育暉","魏筱芬"
    };

    private async Task<IEnumerable<string>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return AccountNameArray;
        return AccountNameArray.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task LoginProcess()
    {
        bool match = AccountNameArray.Where(x => x==username).Count()==1;
        if (match)
        {
            var baseurl = Navigator.BaseUri;
            var request = new HttpRequestMessage(HttpMethod.Post, 
                Navigator.BaseUri + "api/auth/login");

            AuthLoginReq req = new AuthLoginReq
            {
                Username = username
            };
            string json = JsonSerializer.Serialize(req);
            request.Content = new StringContent(json, Encoding.UTF8, "application/json");
            var client = ClientFactory.CreateClient("PPSUF");
            var response = await client.SendAsync(request);
            var result = await response.Content.ReadAsStringAsync();
            var msg = JsonSerializer.Deserialize<MessageModel<bool>>(result);
            if(msg.Success)
            {
                Navigator.NavigateTo("/");
            }
        }
    }
}
